openapi: 3.0.0

info:
  title: Smilr API
  description: REST API for data access layer of the Smilr app
  version: 5.0.0
  contact:
    name: Ben Coleman
    email: ben.coleman@microsoft.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: /api
    description: Self

paths:
  # ========== Events API ==========
  /events/filter/{time}:
    # Filtered list of events based on time frame
    get:
      description: Returns events filtered to a given time frame
      operationId: getFilteredEvents
      tags: [Events]      
      parameters:
        - name: time
          in: path
          description: Time frame to get events for (active, future or past)
          required: true
          schema:
            type: string
            enum:
              - active
              - future
              - past
      responses:
        "200":
          description: Array of events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
        default:
          description: Unexpected error

  # ========== Events API ==========
  /events:
    # All events, not paginated because I'm lazy!
    get:
      description: Returns **all** events from the system, use with caution
      operationId: getAllEvents
      tags: [Events]      
      responses:
        "200":
          description: Array of events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
        default:
          description: Unexpected error

    # Create a new event
    post:
      description: Create a new event
      operationId: createEvent
      tags: [Events]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        description: Event object
        required: true
      responses:
        "200":
          description: Newly created event
        "400": 
          description: Event not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default: 
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error" 

  # ========== Events API ==========
  /events/{id}:
    get:
      # Get a single event
      description: Returns single event with given id
      operationId: getEvent
      tags: [Events]
      parameters:
        - name: id
          in: path
          description: Id of the event, e.g. evt002
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Single event object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "404": 
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default: 
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"                
    
    # Update an event
    put:
      tags: [Events]
      description: Update an existing event
      operationId: updateEvent
      parameters:
        - name: id
          in: path
          description: Id of the event, e.g. evt002
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        description: Event object. Note. If body contains id, the id on the URL path takes priority
        required: true
      responses:
        "200":
          description: Single event object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "4XX": 
          description: Event not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default: 
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
    # Delete an event
    delete:
      tags: [Events]
      description: Delete an event
      operationId: deleteEvent
      parameters:
        - name: id
          in: path
          description: Id of the event, e.g. evt002
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Simple confirmation message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404": 
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default: 
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ========== Feedback API ==========
  /feedback/{eventId}/{topicId}:
    # Get feedback for a given event and topic id
    get:
      tags: [Feedback]
      description: Get the feedback for given event and topic IDs
      operationId: getFeedback
      parameters:
        - name: eventId
          in: path
          description: Id of event you want feedback for
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          description: Numeric id of the topic
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackList"
        default: 
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ========== Feedback API ==========    
  /feedback:
    post:
      tags:
        - Feedback
      description: Send feedback
      operationId: sendFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
        description: Feedback object
        required: true
      responses:
        "200":
          description: Returned feedback object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        "400": 
          description: Validation error, invalid feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404": 
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"                                
        default: 
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ========== System Info API ==========
  /info:
    get:
      tags: [Other]
      description: Get system information, useful for debugging
      operationId: systemInfo
      responses:
        "200":
          description: System info object, a set of various name-value pairs
          content:
            application/json:
              schema:
                type: object
                example:
                  hostname: apihost01
                  appVersion: 5.0.0
                  osType: Linux

        "400":
          description: Unexpected error

  # ========== Bulk load API ==========
  /bulk:
    post:
      tags: [Other]
      description: Bulk load event and feedback data
      operationId: bulkLoad
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bulk"
        description: Bulk load data
        required: true
      responses:
        "200":
          description: Simple confirmation message
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventsLoaded:
                    type: number
                  feedbackLoaded:
                    type: number
        "401": 
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"                                
        default: 
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#
# Schemas
#
components:
  securitySchemes:
    bearerAuth:
      description: JWT token obtained from Azure AD
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Models / entities
  schemas:
    FeedbackList:
      type: array
      items:
        $ref: "#/components/schemas/Feedback"    

    Feedback:
      type: object
      properties:
        event:
          type: string
          example: evt001
        topic:
          type: integer
          example: 1
        rating:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          example: 3
        comment:
          type: string
          example: This was a good session, I learned a lot

    Event:
      type: object
      properties:
        _id:
          type: string
          example: eB60xQ
        title:
          type: string
          example: An event about an interesting thing
        type:
          type: string
          enum:
            - event
            - workshop
            - hack
            - lab
          example: workshop
        start:
          type: string
          example: 2018-02-17
        end:
          type: string
          example: 2018-02-19
        topics:
          type: array
          example:
            - id: 1
              desc: This is a topic
          items: {}

    Events:
      type: array
      items:
        $ref: "#/components/schemas/Event"

    Error:
      type: object
      properties:
        msg:
          type: string
        code:
          type: number

    Bulk:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        feedback:
          type: array
          items:
            $ref: "#/components/schemas/Feedback"